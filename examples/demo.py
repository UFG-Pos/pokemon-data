#!/usr/bin/env python3
"""
Script de demonstra√ß√£o da Pokemon Agent API.

Este script demonstra como usar todas as funcionalidades da API.
"""

import requests
import json
import time
import sys


class PokemonAPIDemo:
    def __init__(self, base_url="http://localhost:8000"):
        self.base_url = base_url
        self.api_url = f"{base_url}/api/v1"
    
    def check_api_health(self):
        """Verifica se a API est√° funcionando."""
        print("üîç Verificando sa√∫de da API...")
        try:
            response = requests.get(f"{self.base_url}/health", timeout=5)
            if response.status_code == 200:
                print("‚úÖ API est√° funcionando!")
                return True
            else:
                print(f"‚ùå API retornou status {response.status_code}")
                return False
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erro ao conectar com a API: {e}")
            return False
    
    def check_services_health(self):
        """Verifica a sa√∫de dos servi√ßos."""
        print("\nüîç Verificando sa√∫de dos servi√ßos...")
        try:
            response = requests.get(f"{self.api_url}/health", timeout=10)
            if response.status_code == 200:
                health_data = response.json()
                print(f"‚úÖ Status geral: {health_data['overall_status']}")
                print(f"üìä Agnos: {health_data['agnos']['agnos_status']}")
                print(f"üêõ Pokemon MCP: {health_data['agnos']['pokemon_mcp']}")
                print(f"üóÑÔ∏è  MongoDB MCP: {health_data['agnos']['mongodb_mcp']}")
                print(f"üíæ Database: {health_data['database']['status']}")
                print(f"üìà Pok√©mons no banco: {health_data['database']['pokemon_count']}")
                return True
            else:
                print(f"‚ùå Health check falhou: {response.status_code}")
                return False
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erro no health check: {e}")
            return False
    
    def import_pokemon(self, name):
        """Importa um pok√©mon."""
        print(f"\nüì• Importando pok√©mon: {name}")
        try:
            response = requests.get(f"{self.api_url}/import-pokemon", 
                                  params={"name": name}, timeout=15)
            
            if response.status_code == 200:
                data = response.json()
                if data["success"]:
                    pokemon = data["data"]
                    print(f"‚úÖ {pokemon['name'].title()} importado com sucesso!")
                    print(f"   ID: {pokemon['id']}")
                    print(f"   Altura: {pokemon['height']} dec√≠metros")
                    print(f"   Peso: {pokemon['weight']} hectogramas")
                    print(f"   Tipos: {', '.join([t['name'] for t in pokemon['types']])}")
                    return True
                else:
                    print(f"‚ùå Falha na importa√ß√£o: {data['message']}")
                    return False
            else:
                error_data = response.json()
                print(f"‚ùå Erro na importa√ß√£o: {error_data.get('detail', 'Erro desconhecido')}")
                return False
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erro na requisi√ß√£o: {e}")
            return False
    
    def list_pokemons(self):
        """Lista todos os pok√©mons."""
        print("\nüìã Listando pok√©mons...")
        try:
            response = requests.get(f"{self.api_url}/pokemons", timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data["success"]:
                    pokemons = data["data"]
                    total = data["total"]
                    print(f"‚úÖ Encontrados {total} pok√©mons:")
                    
                    for pokemon in pokemons:
                        types_str = ", ".join([t['name'] for t in pokemon['types']])
                        print(f"   ‚Ä¢ {pokemon['name'].title()} (ID: {pokemon['id']}) - Tipos: {types_str}")
                    
                    return pokemons
                else:
                    print(f"‚ùå Falha na listagem: {data['message']}")
                    return []
            else:
                print(f"‚ùå Erro na listagem: {response.status_code}")
                return []
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erro na requisi√ß√£o: {e}")
            return []
    
    def get_pokemon(self, name):
        """Busca um pok√©mon espec√≠fico."""
        print(f"\nüîç Buscando pok√©mon: {name}")
        try:
            response = requests.get(f"{self.api_url}/pokemons/{name}", timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data["success"]:
                    pokemon = data["data"]
                    print(f"‚úÖ {pokemon['name'].title()} encontrado!")
                    print(f"   ID: {pokemon['id']}")
                    print(f"   Altura: {pokemon['height']} dec√≠metros")
                    print(f"   Peso: {pokemon['weight']} hectogramas")
                    print(f"   Experi√™ncia base: {pokemon['base_experience']}")
                    print(f"   Tipos: {', '.join([t['name'] for t in pokemon['types']])}")
                    
                    # Mostrar stats
                    stats = pokemon['stats']
                    print("   üìä Stats:")
                    print(f"      HP: {stats['hp']}")
                    print(f"      Ataque: {stats['attack']}")
                    print(f"      Defesa: {stats['defense']}")
                    print(f"      Ataque Especial: {stats['special-attack']}")
                    print(f"      Defesa Especial: {stats['special-defense']}")
                    print(f"      Velocidade: {stats['speed']}")
                    
                    return pokemon
                else:
                    print(f"‚ùå Falha na busca: {data['message']}")
                    return None
            elif response.status_code == 404:
                print(f"‚ùå Pok√©mon '{name}' n√£o encontrado no banco de dados")
                return None
            else:
                print(f"‚ùå Erro na busca: {response.status_code}")
                return None
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erro na requisi√ß√£o: {e}")
            return None
    
    def run_demo(self):
        """Executa a demonstra√ß√£o completa."""
        print("üöÄ Iniciando demonstra√ß√£o da Pokemon Agent API")
        print("=" * 50)
        
        # Verificar sa√∫de da API
        if not self.check_api_health():
            print("\n‚ùå API n√£o est√° dispon√≠vel. Verifique se a aplica√ß√£o est√° rodando.")
            sys.exit(1)
        
        # Verificar sa√∫de dos servi√ßos
        self.check_services_health()
        
        # Lista de pok√©mons para demonstra√ß√£o
        demo_pokemons = ["pikachu", "charizard", "blastoise", "venusaur"]
        
        # Importar pok√©mons
        print("\n" + "=" * 50)
        print("üì• IMPORTANDO POK√âMONS")
        print("=" * 50)
        
        for pokemon_name in demo_pokemons:
            self.import_pokemon(pokemon_name)
            time.sleep(1)  # Pequena pausa entre importa√ß√µes
        
        # Listar todos os pok√©mons
        print("\n" + "=" * 50)
        print("üìã LISTANDO POK√âMONS")
        print("=" * 50)
        
        pokemons = self.list_pokemons()
        
        # Buscar pok√©mons espec√≠ficos
        print("\n" + "=" * 50)
        print("üîç BUSCANDO POK√âMONS ESPEC√çFICOS")
        print("=" * 50)
        
        if pokemons:
            # Buscar os dois primeiros pok√©mons da lista
            for pokemon in pokemons[:2]:
                self.get_pokemon(pokemon['name'])
                time.sleep(1)
        
        # Tentar buscar um pok√©mon que n√£o existe
        print("\nüîç Testando busca de pok√©mon inexistente...")
        self.get_pokemon("pokemon_inexistente")
        
        print("\n" + "=" * 50)
        print("‚úÖ Demonstra√ß√£o conclu√≠da!")
        print("=" * 50)
        print("\nüìñ Para mais informa√ß√µes, acesse:")
        print(f"   ‚Ä¢ Documenta√ß√£o da API: {self.base_url}/docs")
        print(f"   ‚Ä¢ Health Check: {self.base_url}/health")
        print(f"   ‚Ä¢ Health Check Detalhado: {self.api_url}/health")


if __name__ == "__main__":
    demo = PokemonAPIDemo()
    demo.run_demo()
